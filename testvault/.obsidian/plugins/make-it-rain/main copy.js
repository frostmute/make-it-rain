/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RaindropToObsidian
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");
var import_obsidian4 = require("obsidian");

// src/utils/fileUtils.ts
async function doesPathExist(app, path) {
  return app.vault.adapter.exists(path);
}
async function isPathAFolder(app, path) {
  const stat = await app.vault.adapter.stat(path);
  return (stat == null ? void 0 : stat.type) === "folder";
}
async function createFolder(app, path) {
  const doesFolderExist = await doesPathExist(app, path);
  if (doesFolderExist) {
    const isFolder = await isPathAFolder(app, path);
    if (isFolder) return true;
    throw new Error(`Path exists but is not a folder: ${path}`);
  }
  try {
    await app.vault.createFolder(path);
    return true;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    throw new Error(`Failed to create folder at ${path}: ${errorMessage}`);
  }
}
function sanitizeFileName(fileName) {
  const invalidChars = /[/\\:*?"<>|#%&{}$!@'`+=]/g;
  const replacement = "";
  const isStringEmpty = !fileName || fileName.trim() === "";
  if (isStringEmpty) return "Unnamed_Raindrop";
  const sanitizedName = fileName.replace(invalidChars, replacement).trim();
  const isSanitizedEmpty = !sanitizedName;
  const maxLength = 200;
  return (isSanitizedEmpty ? "Unnamed_Raindrop" : sanitizedName).substring(0, maxLength);
}
async function createFolderStructure(app, fullPath) {
  if (!fullPath || fullPath === "/") return true;
  try {
    const doesExist = await doesPathExist(app, fullPath);
    if (doesExist) {
      const isFolder = await isPathAFolder(app, fullPath);
      if (isFolder) return true;
      throw new Error(`Path exists but is not a folder: ${fullPath}`);
    }
    const lastSlashIndex = fullPath.lastIndexOf("/");
    if (lastSlashIndex > 0) {
      const parentPath = fullPath.substring(0, lastSlashIndex);
      await createFolderStructure(app, parentPath);
    }
    await createFolder(app, fullPath);
    return true;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    throw new Error(`Failed to create/verify folder: ${fullPath}. Error: ${errorMessage}.`);
  }
}

// src/utils/apiUtils.ts
var import_obsidian = require("obsidian");
function createRateLimiter(maxRequestsPerMinute = 60, delayBetweenRequests = 300) {
  let requestCount = 0;
  let resetTime = Date.now() + 6e4;
  const checkLimit = async () => {
    const now = Date.now();
    if (now > resetTime) {
      resetTime = now + 6e4;
      requestCount = 0;
    }
    if (requestCount >= maxRequestsPerMinute) {
      const waitTime = resetTime - now;
      console.log(`Rate limit reached. Waiting ${waitTime}ms before next request.`);
      await new Promise((resolve) => setTimeout(resolve, waitTime));
      resetTime = Date.now() + 6e4;
      requestCount = 0;
    } else {
      await new Promise((resolve) => setTimeout(resolve, delayBetweenRequests));
    }
    requestCount++;
  };
  const resetCounter = () => {
    resetTime = Date.now() + 6e4;
    requestCount = 0;
    console.log("Rate limiter counter reset.");
  };
  return { checkLimit, resetCounter };
}
function parseApiResponse(response) {
  if (typeof response === "string") {
    return JSON.parse(response);
  }
  return response;
}
async function handleRequestError(error, rateLimiter, attemptNumber, maxRetries, delayBetweenRetries) {
  const isLastAttempt = attemptNumber >= maxRetries - 1;
  if (error.status === 429 || error.message && error.message.includes("rate limit")) {
    console.log("Rate limit hit, resetting counter and waiting...");
    rateLimiter.resetCounter();
    await new Promise((resolve) => setTimeout(resolve, delayBetweenRetries * 2));
    return true;
  }
  console.error(`Error in API request (attempt ${attemptNumber + 1}/${maxRetries}):`, error);
  if (!isLastAttempt) {
    await new Promise((resolve) => setTimeout(resolve, delayBetweenRetries));
    return true;
  }
  return false;
}
async function fetchWithRetry(appOrUrl, urlOrOptions, optionsOrRateLimiter, rateLimiterOrMaxRetries, maxRetries = 3, delayBetweenRetries = 1e3) {
  let app;
  let url;
  let requestOptions;
  let rateLimiter;
  if (typeof appOrUrl === "string") {
    url = appOrUrl;
    requestOptions = urlOrOptions;
    rateLimiter = optionsOrRateLimiter;
    if (typeof rateLimiterOrMaxRetries === "number") {
      maxRetries = rateLimiterOrMaxRetries;
    }
  } else {
    app = appOrUrl;
    url = urlOrOptions;
    requestOptions = optionsOrRateLimiter;
    rateLimiter = rateLimiterOrMaxRetries;
  }
  for (let attemptNumber = 0; attemptNumber < maxRetries; attemptNumber++) {
    const isLastAttempt = attemptNumber === maxRetries - 1;
    try {
      await rateLimiter.checkLimit();
      const response = await (0, import_obsidian.request)({
        url,
        method: requestOptions.method || "GET",
        headers: requestOptions.headers,
        body: requestOptions.body
      });
      return parseApiResponse(response);
    } catch (error) {
      if (!await handleRequestError(error, rateLimiter, attemptNumber, maxRetries, delayBetweenRetries) && isLastAttempt) {
        throw error;
      }
    }
  }
  throw new Error("Request failed after maximum retry attempts");
}

// src/utils/yamlUtils.ts
var import_obsidian2 = require("obsidian");
function isPlainObject(value) {
  return value !== null && typeof value === "object" && !Array.isArray(value);
}
function formatYamlValue(value, indentLevel = 0) {
  const indent = "  ".repeat(indentLevel);
  if (value === null || value === void 0) {
    return "null";
  }
  if (typeof value === "boolean") {
    return value ? "true" : "false";
  }
  if (typeof value === "number") {
    return value.toString();
  }
  if (typeof value === "string") {
    if (value.includes("\n") || value.includes(":") || value.includes("{") || value.includes("}") || value.includes("[") || value.includes("]") || value.includes("#") || value.includes("*") || value.includes("&") || value.includes("!") || value.includes("|") || value.includes(">") || value.includes("`") || value.trim() === "" || /^[0-9]/.test(value) || // Starts with number
    /^true$|^false$|^yes$|^no$|^on$|^off$/i.test(value)) {
      if (value.includes("\n")) {
        let result = "|\n";
        const lines = value.split("\n");
        for (const line of lines) {
          result += `${indent}  ${line}
`;
        }
        return result.trimEnd();
      }
      return `"${escapeYamlString(value)}"`;
    }
    return value;
  }
  if (Array.isArray(value)) {
    if (value.length === 0) {
      return "[]";
    }
    let result = "\n";
    for (const item of value) {
      result += `${indent}- ${formatYamlValue(item, indentLevel + 1)}
`;
    }
    return result.trimEnd();
  }
  if (isPlainObject(value)) {
    const keys = Object.keys(value);
    if (keys.length === 0) {
      return "{}";
    }
    let result = "\n";
    for (const key of keys) {
      const formattedValue = formatYamlValue(value[key], indentLevel + 1);
      if (formattedValue.startsWith("\n")) {
        result += `${indent}${key}:${formattedValue}
`;
      } else {
        result += `${indent}${key}: ${formattedValue}
`;
      }
    }
    return result.trimEnd();
  }
  try {
    return JSON.stringify(value);
  } catch (error) {
    console.error("Error formatting YAML value:", error);
    return `"Error formatting value"`;
  }
}
function escapeYamlString(str) {
  return str.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\t/g, "\\t").replace(/\r/g, "\\r");
}
function createYamlFrontmatter(data) {
  try {
    let frontmatter = "---\n";
    for (const [key, value] of Object.entries(data)) {
      const formattedValue = formatYamlValue(value);
      if (formattedValue.startsWith("\n")) {
        frontmatter += `${key}:${formattedValue}
`;
      } else {
        frontmatter += `${key}: ${formattedValue}
`;
      }
    }
    frontmatter += "---\n\n";
    return frontmatter;
  } catch (error) {
    console.error("Error creating YAML frontmatter:", error);
    new import_obsidian2.Notice("Error creating note frontmatter. Check console for details.");
    return '---\ntitle: "Error creating frontmatter"\n---\n\n';
  }
}

// src/main.ts
var RaindropTypes = {
  LINK: "link",
  ARTICLE: "article",
  IMAGE: "image",
  VIDEO: "video",
  DOCUMENT: "document",
  AUDIO: "audio"
};
var TagMatchTypes = {
  ALL: "all",
  ANY: "any"
};
var SystemCollections = {
  UNSORTED: -1,
  TRASH: -99
};
var FilterTypes = {
  ...RaindropTypes,
  ALL: "all"
};
var DEFAULT_SETTINGS = {
  raindropApiToken: "",
  defaultVaultLocation: "",
  fileNameTemplate: "{{title}}",
  showRibbonIcon: true,
  bannerFieldName: "banner"
};
var RaindropToObsidian = class extends import_obsidian3.Plugin {
  // Descriptive variable names with auxiliary verbs
  constructor(app, manifest) {
    super(app, manifest);
    // Property to store the ribbon icon element
    this.isRibbonShown = false;
    this.settings = { ...DEFAULT_SETTINGS };
    this.rateLimiter = createRateLimiter();
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "fetch-raindrops",
      name: "Fetch Raindrops",
      callback: async () => {
        new RaindropFetchModal(this.app, this).open();
      }
    });
    this.updateRibbonIcon();
    this.addSettingTab(new RaindropToObsidianSettingTab(this.app, this));
    console.log("Make It Rain plugin loaded!");
  }
  onunload() {
    var _a;
    (_a = this.ribbonIconEl) == null ? void 0 : _a.remove();
    console.log("Make It Rain plugin unloaded.");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  /**
   * Generates a file name based on the provided raindrop data and settings
   * @param raindrop - The raindrop data to use for file name generation
   * @param useRaindropTitleForFileName - Whether to use the raindrop title for the file name
   * @returns The generated file name
   */
  generateFileName(raindrop, useRaindropTitleForFileName) {
    var _a;
    const fileNameTemplate = useRaindropTitleForFileName ? this.settings.fileNameTemplate : "{{id}}";
    let fileName = fileNameTemplate;
    const replacePlaceholder = (placeholder, value) => {
      const safeValue = sanitizeFileName(value);
      const regex = new RegExp(`{{${placeholder}}}`, "gi");
      fileName = fileName.replace(regex, safeValue);
    };
    try {
      replacePlaceholder("title", raindrop.title || "Untitled");
      replacePlaceholder("id", (raindrop._id || "unknown_id").toString());
      replacePlaceholder("collectionTitle", ((_a = raindrop.collection) == null ? void 0 : _a.title) || "No Collection");
      const createdDate = raindrop.created ? new Date(raindrop.created) : null;
      let formattedDate = "no_date";
      if (createdDate && !isNaN(createdDate.getTime())) {
        formattedDate = createdDate.toISOString().split("T")[0];
      }
      replacePlaceholder("date", formattedDate);
    } catch (error) {
      let errorMsg = "template processing error";
      if (error instanceof Error) errorMsg = error.message;
      console.error("Error processing file name template:", errorMsg, error);
      new import_obsidian3.Notice("Error generating file name. Check console or template.");
      return "Error_Filename_" + Date.now();
    }
    let finalFileName = sanitizeFileName(fileName);
    if (!finalFileName.trim()) {
      return "Unnamed_Raindrop_" + (raindrop._id || Date.now());
    }
    return finalFileName;
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  sanitizeFileName(name) {
    return sanitizeFileName(name);
  }
  /**
   * Update the ribbon icon based on settings
   */
  updateRibbonIcon() {
    var _a;
    (_a = this.ribbonIconEl) == null ? void 0 : _a.remove();
    this.ribbonIconEl = void 0;
    if (this.settings.showRibbonIcon) {
      this.ribbonIconEl = this.addRibbonIcon(
        "cloud-download",
        // Obsidian icon ID for cloud download
        "Fetch Raindrops",
        // Tooltip text
        () => {
          new RaindropFetchModal(this.app, this).open();
        }
      );
    }
  }
  async fetchRaindrops(options) {
    var _a;
    const baseApiUrl = "https://api.raindrop.io/rest/v1";
    const fetchOptions = {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${this.settings.raindropApiToken}`
      }
    };
    const loadingNotice = new import_obsidian3.Notice("Starting Raindrop fetch...", 0);
    try {
      let allData = [];
      const perPage = 50;
      if (!this.settings.raindropApiToken) {
        loadingNotice.hide();
        new import_obsidian3.Notice("Please configure your Raindrop.io API token in the plugin settings.", 1e4);
        return;
      }
      let resolvedCollectionIds = [];
      const collectionNameToIdMap = /* @__PURE__ */ new Map();
      const collectionIdToNameMap = /* @__PURE__ */ new Map();
      const collectionHierarchy = /* @__PURE__ */ new Map();
      let collectionsData = void 0;
      if (options.collections) {
        const collectionInputs = options.collections.split(",").map((input) => input.trim()).filter((input) => input !== "");
        loadingNotice.setMessage("Fetching user collections...");
        const rootCollectionsResponse = await fetchWithRetry(
          `${baseApiUrl}/collections`,
          fetchOptions,
          this.rateLimiter
        );
        const rootCollectionsData = rootCollectionsResponse;
        const nestedCollectionsResponse = await fetchWithRetry(
          `${baseApiUrl}/collections/childrens`,
          fetchOptions,
          this.rateLimiter
        );
        const nestedCollectionsData = nestedCollectionsResponse;
        let allCollections = [];
        if ((rootCollectionsData == null ? void 0 : rootCollectionsData.result) && (rootCollectionsData == null ? void 0 : rootCollectionsData.items)) {
          allCollections = allCollections.concat(rootCollectionsData.items);
        }
        if ((nestedCollectionsData == null ? void 0 : nestedCollectionsData.result) && (nestedCollectionsData == null ? void 0 : nestedCollectionsData.items)) {
          allCollections = allCollections.concat(nestedCollectionsData.items);
        }
        if (allCollections.length === 0) {
          console.error("API Error fetching collections: No collections returned from both endpoints.");
          loadingNotice.hide();
          new import_obsidian3.Notice("Error fetching user collections. Please check your API token and connection.", 1e4);
          return;
        }
        allCollections.forEach((col) => {
          var _a2;
          collectionNameToIdMap.set(col.title.toLowerCase(), col._id);
          collectionIdToNameMap.set(col._id, col.title);
          collectionHierarchy.set(col._id, { title: col.title, parentId: (_a2 = col.parent) == null ? void 0 : _a2.$id });
        });
        collectionsData = { result: true, items: allCollections };
        const unresolvedInputs = [];
        for (const input of collectionInputs) {
          const inputAsNumber = parseInt(input, 10);
          if (!isNaN(inputAsNumber)) {
            if (collectionIdToNameMap.has(inputAsNumber)) {
              resolvedCollectionIds.push(inputAsNumber);
            } else {
              unresolvedInputs.push(input);
              console.warn(`Could not find collection with ID: ${input}`);
            }
          } else {
            const resolvedId = collectionNameToIdMap.get(input.toLowerCase());
            if (resolvedId !== void 0) {
              resolvedCollectionIds.push(resolvedId);
            } else {
              unresolvedInputs.push(input);
              console.warn(`Could not resolve collection name: ${input}`);
            }
          }
        }
        if (unresolvedInputs.length > 0) {
          new import_obsidian3.Notice(`Could not find collections: ${unresolvedInputs.join(", ")}. Please check names or use IDs.`, 15e3);
        }
        if (resolvedCollectionIds.length === 0 && collectionInputs.length > 0) {
          loadingNotice.hide();
          new import_obsidian3.Notice("No valid collection IDs or names provided.", 5e3);
          return;
        }
        resolvedCollectionIds = Array.from(new Set(resolvedCollectionIds));
      } else {
        loadingNotice.setMessage("Fetching all collections...");
        const rootCollectionsResponse = await fetchWithRetry(
          `${baseApiUrl}/collections`,
          fetchOptions,
          this.rateLimiter
        );
        const rootCollectionsData = rootCollectionsResponse;
        const nestedCollectionsResponse = await fetchWithRetry(
          `${baseApiUrl}/collections/childrens`,
          fetchOptions,
          this.rateLimiter
        );
        const nestedCollectionsData = nestedCollectionsResponse;
        let allCollections = [];
        if ((rootCollectionsData == null ? void 0 : rootCollectionsData.result) && (rootCollectionsData == null ? void 0 : rootCollectionsData.items)) {
          allCollections = allCollections.concat(rootCollectionsData.items);
        }
        if ((nestedCollectionsData == null ? void 0 : nestedCollectionsData.result) && (nestedCollectionsData == null ? void 0 : nestedCollectionsData.items)) {
          allCollections = allCollections.concat(nestedCollectionsData.items);
        }
        if (allCollections.length === 0) {
          console.error("API Error fetching collections: No collections returned from both endpoints.");
          loadingNotice.hide();
          new import_obsidian3.Notice("Error fetching user collections. Please check your API token and connection.", 1e4);
          return;
        }
        allCollections.forEach((col) => {
          var _a2;
          collectionNameToIdMap.set(col.title.toLowerCase(), col._id);
          collectionIdToNameMap.set(col._id, col.title);
          collectionHierarchy.set(col._id, { title: col.title, parentId: (_a2 = col.parent) == null ? void 0 : _a2.$id });
        });
        collectionsData = { result: true, items: allCollections };
      }
      const searchParameterString = options.apiFilterTags.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "").join(" ");
      let fetchMode = "all";
      if (resolvedCollectionIds.length > 0) {
        fetchMode = "collections";
      } else if (searchParameterString || options.tagMatchType === TagMatchTypes.ANY && options.apiFilterTags.length > 0) {
        fetchMode = "tags";
      }
      if (fetchMode === "collections") {
        for (const collectionId of resolvedCollectionIds) {
          let hasMore = true;
          let page = 0;
          const collectionApiBaseUrl = `${baseApiUrl}/raindrops/${collectionId}`;
          while (hasMore) {
            const params = new URLSearchParams({
              perpage: perPage.toString(),
              page: page.toString()
            });
            if (options.filterType && options.filterType !== "all") {
              params.append("type", options.filterType);
            }
            if (searchParameterString) {
              params.append("search", searchParameterString);
            }
            if (options.includeSubcollections) {
              params.append("nested", "true");
            }
            const currentApiUrl = `${collectionApiBaseUrl}?${params.toString()}`;
            console.log(`Requesting items from collection ID: ${collectionId}`, currentApiUrl);
            const collectionNameForNotice = collectionIdToNameMap.get(collectionId) || collectionId.toString();
            loadingNotice.setMessage(`Fetching from collection: ${collectionNameForNotice}, page ${page + 1}...`);
            const response = await fetchWithRetry(currentApiUrl, fetchOptions, this.rateLimiter);
            const data = response;
            if (!data.result) {
              console.error(`API Error for collection ${collectionId}:`, data);
              new import_obsidian3.Notice(`Error fetching collection: ${collectionNameForNotice}. Skipping.`, 7e3);
              hasMore = false;
              continue;
            }
            if (data == null ? void 0 : data.items) {
              allData = allData.concat(data.items);
              page++;
              hasMore = data.items.length === perPage;
              console.log(`Fetched ${data.items.length} items from collection ${collectionId}, page ${page}`);
              if (hasMore) {
                loadingNotice.setMessage(`Fetching from collection: ${collectionNameForNotice}, page ${page + 1}...`);
              }
            } else {
              console.warn(`Unexpected response for collection ${collectionId}. Stopping.`);
              hasMore = false;
            }
          }
        }
      } else if (fetchMode === "tags") {
        if (options.tagMatchType === TagMatchTypes.ANY && options.apiFilterTags.length > 0) {
          const uniqueItems = /* @__PURE__ */ new Map();
          const tagsArray = options.apiFilterTags.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
          for (const tag of tagsArray) {
            let hasMore = true;
            let page = 0;
            while (hasMore) {
              const params = new URLSearchParams({
                perpage: perPage.toString(),
                page: page.toString(),
                search: `#${tag}`
                // Simple, reliable single-tag search
              });
              if (options.filterType && options.filterType !== "all") {
                params.append("type", options.filterType);
              }
              const currentApiUrl = `${baseApiUrl}/raindrops/0?${params.toString()}`;
              console.log(`Requesting items with tag: ${tag}`, currentApiUrl);
              loadingNotice.setMessage(`Fetching items with tag: ${tag}, page ${page + 1}...`);
              const response = await fetchWithRetry(this.app, currentApiUrl, fetchOptions, this.rateLimiter);
              const data = response;
              if (!data.result) {
                console.error(`API Error for tag ${tag}:`, data);
                continue;
              }
              console.log(`API Response for tag ${tag}:`, {
                result: data.result,
                itemCount: ((_a = data == null ? void 0 : data.items) == null ? void 0 : _a.length) || 0,
                totalCount: (data == null ? void 0 : data.count) || 0
              });
              if (data == null ? void 0 : data.items) {
                data.items.forEach((item) => {
                  if (!uniqueItems.has(item._id)) {
                    uniqueItems.set(item._id, item);
                  }
                });
                page++;
                hasMore = data.items.length === perPage;
                console.log(`Fetched ${data.items.length} items for tag ${tag}, page ${page}`);
                if (hasMore) {
                  loadingNotice.setMessage(`Fetching items with tag: ${tag}, page ${page + 1}...`);
                }
              } else {
                hasMore = false;
              }
            }
          }
          allData = Array.from(uniqueItems.values());
          console.log(`Total unique items found across all tags: ${allData.length}`);
        } else if (searchParameterString) {
          let hasMore = true;
          let page = 0;
          while (hasMore) {
            const params = new URLSearchParams({
              perpage: perPage.toString(),
              page: page.toString(),
              search: searchParameterString
              // This handles space-separated tags for AND logic
            });
            if (options.filterType && options.filterType !== "all") {
              params.append("type", options.filterType);
            }
            const currentApiUrl = `${baseApiUrl}/raindrops/0?${params.toString()}`;
            console.log(`Requesting items with tags: ${searchParameterString}`, currentApiUrl);
            loadingNotice.setMessage(`Fetching items with tags: ${searchParameterString}, page ${page + 1}...`);
            const response = await fetchWithRetry(currentApiUrl, fetchOptions, this.rateLimiter);
            const data = response;
            if (!data.result) {
              console.error("API Error for tag search:", data);
              throw new Error(`API Error: ${JSON.stringify(data)}`);
            }
            if (data == null ? void 0 : data.items) {
              allData = allData.concat(data.items);
              page++;
              hasMore = data.items.length === perPage;
              console.log(`Fetched ${data.items.length} items with tags, page ${page}`);
              if (hasMore) {
                loadingNotice.setMessage(`Fetching items with tags: ${searchParameterString}, page ${page + 1}...`);
              }
            } else {
              hasMore = false;
            }
          }
        }
      } else {
        let hasMore = true;
        let page = 0;
        while (hasMore) {
          const params = new URLSearchParams({ perpage: perPage.toString(), page: page.toString() });
          if (options.filterType && options.filterType !== "all") {
            params.append("type", options.filterType);
          }
          const currentApiUrl = `${baseApiUrl}/raindrops/0?${params.toString()}`;
          console.log("Requesting all items:", currentApiUrl);
          loadingNotice.setMessage(`Fetching all items, page ${page + 1}...`);
          const response = await fetchWithRetry(currentApiUrl, fetchOptions, this.rateLimiter);
          const data = response;
          if (!data.result) {
            console.error("API Error for all items fetch:", data);
            throw new Error(`API Error: ${JSON.stringify(data)}`);
          }
          if (data == null ? void 0 : data.items) {
            allData = allData.concat(data.items);
            page++;
            hasMore = data.items.length === perPage;
            console.log(`Fetched ${data.items.length} items, page ${page}`);
            if (hasMore) {
              loadingNotice.setMessage(`Fetching all items, page ${page + 1}...`);
            }
          } else {
            console.warn("Unexpected response for all items fetch. Stopping.");
            hasMore = false;
          }
        }
      }
      if (allData.length === 0) {
        if (resolvedCollectionIds.length > 0 || searchParameterString || options.tagMatchType === TagMatchTypes.ANY && options.apiFilterTags.length > 0) {
          loadingNotice.hide();
          new import_obsidian3.Notice("No raindrops found matching your criteria.", 5e3);
        } else {
          loadingNotice.hide();
          new import_obsidian3.Notice("No raindrops found in your account.", 5e3);
        }
      } else {
        loadingNotice.setMessage(`Found ${allData.length} raindrops. Processing...`);
        await this.processRaindrops(allData, options.vaultPath, options.appendTagsToNotes, options.useRaindropTitleForFileName, loadingNotice, options, collectionsData, resolvedCollectionIds, collectionIdToNameMap);
      }
    } catch (error) {
      loadingNotice.hide();
      let errorMessage = "An unknown error occurred during fetch";
      if (error instanceof Error) errorMessage = error.message;
      else if (typeof error === "string") errorMessage = error;
      new import_obsidian3.Notice(`Error fetching raindrops: ${errorMessage}`, 1e4);
      console.error("Error fetching Raindrop API:", error);
    }
  }
  async processRaindrops(raindrops, vaultPath, appendTagsToNotes, useRaindropTitleForFileName, loadingNotice, options, collectionsData, resolvedCollectionIds = [], collectionIdToNameMap = /* @__PURE__ */ new Map()) {
    var _a, _b, _c, _d;
    const { app } = this;
    const settingsFMTags = appendTagsToNotes.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
    if (vaultPath === void 0) vaultPath = this.settings.defaultVaultLocation;
    const targetFolderPath = (_a = vaultPath == null ? void 0 : vaultPath.trim()) != null ? _a : "";
    const collectionHierarchy = /* @__PURE__ */ new Map();
    if (collectionsData == null ? void 0 : collectionsData.result) {
      collectionsData.items.forEach((col) => {
        var _a2;
        collectionHierarchy.set(col._id, { title: col.title, parentId: (_a2 = col.parent) == null ? void 0 : _a2.$id });
      });
    }
    const getAncestorIds = (collectionId) => {
      const ancestors = [];
      ancestors.push(collectionId);
      let currentId = collectionId;
      while (currentId !== void 0 && currentId !== 0 && currentId !== SystemCollections.UNSORTED && currentId !== SystemCollections.TRASH) {
        const collection = collectionHierarchy.get(currentId);
        if (!collection || collection.parentId === void 0) {
          break;
        }
        ancestors.push(collection.parentId);
        currentId = collection.parentId;
      }
      return ancestors;
    };
    const resolvedCollectionNames = /* @__PURE__ */ new Set();
    if (collectionIdToNameMap.size > 0) {
      resolvedCollectionIds.forEach((id) => {
        const name = collectionIdToNameMap.get(id);
        if (name) {
          resolvedCollectionNames.add(this.sanitizeFileName(name).toLowerCase());
        }
      });
    }
    if (targetFolderPath) {
      try {
        const folder = app.vault.getAbstractFileByPath(targetFolderPath);
        if (!folder) {
          console.log(`Creating base folder: ${targetFolderPath}`);
          await app.vault.createFolder(targetFolderPath);
        } else if (!folder.hasOwnProperty("children")) {
          throw new Error(`Path exists but is not a folder: ${targetFolderPath}`);
        }
      } catch (error) {
        let errorMsg = "folder creation failed";
        if (error instanceof Error) errorMsg = error.message;
        new import_obsidian3.Notice(`Failed to create/verify base folder: ${targetFolderPath}. Error: ${errorMsg}.`, 1e4);
        console.error("Error with folder operation:", error);
        loadingNotice.hide();
        return;
      }
    }
    let createdCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    let updatedCount = 0;
    const total = raindrops.length;
    let processed = 0;
    const raindropsByCollection = {};
    for (const raindrop of raindrops) {
      const collectionId = ((_c = (_b = raindrop.collection) == null ? void 0 : _b.$id) == null ? void 0 : _c.toString()) || "uncategorized";
      if (!raindropsByCollection[collectionId]) {
        raindropsByCollection[collectionId] = [];
      }
      raindropsByCollection[collectionId].push(raindrop);
    }
    for (const [collectionId, collectionRaindrops] of Object.entries(raindropsByCollection)) {
      let relativeFolderPathSegments = [];
      let collectionTitleForNotice = "Unknown Collection";
      const currentCollectionId = parseInt(collectionId, 10);
      if (!isNaN(currentCollectionId) && currentCollectionId > 0 && collectionHierarchy.size > 0) {
        const ancestorIds = getAncestorIds(currentCollectionId);
        let deepestSpecifiedAncestorId = void 0;
        if (resolvedCollectionIds.length === 0) {
          deepestSpecifiedAncestorId = void 0;
        } else if (resolvedCollectionIds.includes(currentCollectionId)) {
          deepestSpecifiedAncestorId = currentCollectionId;
        } else {
          for (const ancestorId of ancestorIds) {
            if (resolvedCollectionIds.includes(ancestorId)) {
              deepestSpecifiedAncestorId = ancestorId;
              break;
            }
          }
        }
        if (deepestSpecifiedAncestorId !== void 0 || resolvedCollectionIds.length === 0) {
          const pathSegments = [];
          let currentTraverseId = currentCollectionId;
          const tempSegments = [];
          while (currentTraverseId !== void 0 && currentTraverseId !== 0 && currentTraverseId !== -1 && currentTraverseId !== -99) {
            const collection = collectionHierarchy.get(currentTraverseId);
            if (!collection) break;
            const sanitizedTitle = this.sanitizeFileName(collection.title);
            if (sanitizedTitle) {
              tempSegments.unshift(sanitizedTitle);
            }
            if (resolvedCollectionIds.length > 0 && currentTraverseId === deepestSpecifiedAncestorId) {
              break;
            }
            currentTraverseId = collection.parentId;
          }
          relativeFolderPathSegments = tempSegments;
          collectionTitleForNotice = relativeFolderPathSegments.join("/");
        } else {
          console.warn(`Collection path did not contain a user-specified ancestor or was not the specified collection itself. Placing in Uncategorized: Collection ID ${currentCollectionId}`);
          relativeFolderPathSegments = ["Uncategorized"];
          collectionTitleForNotice = "Uncategorized";
        }
      } else if (currentCollectionId === -1 || currentCollectionId === 0) {
        relativeFolderPathSegments = [];
        collectionTitleForNotice = currentCollectionId === -1 ? "Unsorted" : "All Items";
      } else if (collectionId === "uncategorized") {
        relativeFolderPathSegments = ["Uncategorized"];
        collectionTitleForNotice = "Uncategorized";
      } else {
        relativeFolderPathSegments = [];
        collectionTitleForNotice = "Unknown Collection";
        console.warn(`Could not determine collection path for ID: ${collectionId}. Placing in target folder.`);
      }
      const fullDesiredFolderPath = relativeFolderPathSegments.length > 0 ? `${targetFolderPath}${targetFolderPath ? "/" : ""}${relativeFolderPathSegments.join("/")}` : targetFolderPath;
      let currentPath = targetFolderPath;
      const pathSegmentsToCreate = relativeFolderPathSegments;
      for (const segment of pathSegmentsToCreate) {
        if (!segment) continue;
        currentPath = currentPath ? `${currentPath}/${segment}` : segment;
        try {
          await createFolderStructure(app, currentPath);
        } catch (error) {
          let errorMsg = "folder creation failed";
          if (error instanceof Error) errorMsg = error.message;
          new import_obsidian3.Notice(`Failed to create/verify folder: ${currentPath}. Error: ${errorMsg}.`, 1e4);
          console.error("Error with folder operation:", error);
          break;
        }
      }
      const collectionFolderPath = currentPath;
      for (const raindrop of collectionRaindrops) {
        try {
          const generatedFilename = this.generateFileName(raindrop, useRaindropTitleForFileName);
          const filePath = `${collectionFolderPath}/${generatedFilename}.md`;
          const raindropTitle = raindrop.title || "Untitled";
          loadingNotice.setMessage(`Processing '${raindropTitle}' in '${collectionTitleForNotice}'... (${processed}/${total})`);
          const fileExists = await app.vault.adapter.exists(filePath);
          let processOutcome = "created";
          if (fileExists) {
            if (options.fetchOnlyNew) {
              console.log(`Skipping existing file (Fetch Only New enabled): ${filePath}`);
              processOutcome = "skipped";
            } else if (options.updateExisting) {
              console.log(`Checking existing file for update: ${filePath}`);
              let shouldUpdate = false;
              try {
                const existingFile = app.vault.getAbstractFileByPath(filePath);
                if (existingFile instanceof import_obsidian3.TFile) {
                  const existingContent = await app.vault.cachedRead(existingFile);
                  const match = existingContent.match(/^---\n([^\s\S]*?)\n---/);
                  if (match && match[1]) {
                    const frontmatterRaw = match[1];
                    const idMatch = frontmatterRaw.match(/^id:\s*(\d+)/m);
                    const lastUpdateMatch = frontmatterRaw.match(/^last_update:\s*(.*)/m);
                    const existingRaindropId = idMatch && idMatch[1] ? parseInt(idMatch[1], 10) : null;
                    const existingLastUpdate = lastUpdateMatch && lastUpdateMatch[1] ? new Date(lastUpdateMatch[1]) : null;
                    const fetchedLastUpdate = new Date(raindrop.lastUpdate);
                    if (existingRaindropId === raindrop._id) {
                      if (!existingLastUpdate || isNaN(existingLastUpdate.getTime()) || fetchedLastUpdate > existingLastUpdate) {
                        console.log(`Update needed for ${filePath}: Raindrop.io data is newer or existing timestamp invalid.`);
                        shouldUpdate = true;
                      } else {
                        console.log(`No update needed for ${filePath}: Raindrop.io data is not newer.`);
                      }
                    } else {
                      console.warn(`File exists with matching name but different Raindrop ID: ${filePath} (Existing ID: ${existingRaindropId}, Fetched ID: ${raindrop._id}). Skipping.`);
                    }
                  } else {
                    console.warn(`File exists but has no valid frontmatter or required fields: ${filePath}. Skipping.`);
                  }
                } else {
                  console.warn(`Path exists but is not a file: ${filePath}. Skipping.`);
                }
              } catch (readError) {
                console.error(`Error reading existing file ${filePath}:`, readError);
                processOutcome = "error";
              }
              if (shouldUpdate) {
                processOutcome = "updated";
              } else if (processOutcome !== "error") {
                processOutcome = "skipped";
              }
            } else {
              console.log(`Skipping existing file: ${filePath}`);
              processOutcome = "skipped";
            }
          }
          if (processOutcome === "created" || processOutcome === "updated") {
            const rdTitle = raindrop.title || "Untitled Raindrop";
            const rdNoteContent = raindrop.note || "";
            const rdExcerpt = raindrop.excerpt || "";
            const rdSourceUrl = raindrop.link;
            const rdCoverUrl = raindrop.cover || "";
            const frontmatterData = {
              // Basic metadata
              id: raindrop._id,
              title: rdTitle,
              source: rdSourceUrl,
              type: raindrop.type,
              created: raindrop.created,
              last_update: raindrop.lastUpdate
            };
            if (rdExcerpt) {
              frontmatterData.description = rdExcerpt;
            }
            let collectionInfo = { id: -1, title: "Unsorted" };
            if (((_d = raindrop.collection) == null ? void 0 : _d.$id) && collectionIdToNameMap.has(raindrop.collection.$id)) {
              const collectionId2 = raindrop.collection.$id;
              const collectionTitle = collectionIdToNameMap.get(collectionId2) || "Unknown";
              collectionInfo = {
                id: collectionId2,
                title: collectionTitle
              };
              if (collectionHierarchy.has(collectionId2)) {
                const cInfo = collectionHierarchy.get(collectionId2);
                if ((cInfo == null ? void 0 : cInfo.parentId) !== void 0) {
                  collectionInfo.parent_id = cInfo.parentId;
                }
              }
            }
            frontmatterData.collection = collectionInfo;
            let combinedFMTags = [...settingsFMTags];
            if (raindrop.tags && Array.isArray(raindrop.tags)) {
              raindrop.tags.forEach((tag) => {
                const trimmedTag = tag.trim();
                if (trimmedTag && !combinedFMTags.includes(trimmedTag)) {
                  combinedFMTags.push(trimmedTag);
                }
              });
            }
            const sanitizedTags = combinedFMTags.map(
              (tag) => tag.replace(/ /g, "_").replace(/[^\w\u00C0-\u00FF\u0100-\u017F\u0180-\u024F\u1E00-\u1EFF\/-]+/g, "")
            ).filter((tag) => tag.length > 0);
            frontmatterData.tags = sanitizedTags;
            if (rdCoverUrl) {
              frontmatterData[this.settings.bannerFieldName] = rdCoverUrl;
            }
            let noteContent = "";
            if (rdCoverUrl) {
              const altText = this.sanitizeFileName(rdTitle === "Untitled Raindrop" ? "Cover Image" : rdTitle).replace(/\.md$/i, "");
              noteContent += `![${altText}](${rdCoverUrl})

`;
            }
            noteContent += `# ${rdTitle}

`;
            if (rdExcerpt && !rdExcerpt.includes("\n")) {
              noteContent += `## Description
${rdExcerpt}

`;
            }
            if (rdNoteContent) noteContent += `## Notes
${rdNoteContent}

`;
            if (raindrop.highlights && Array.isArray(raindrop.highlights) && raindrop.highlights.length > 0) {
              noteContent += "## Highlights\n";
              raindrop.highlights.forEach((highlight) => {
                if (highlight.text) {
                  noteContent += `- ${highlight.text.replace(/r\n|r|n/g, " ")}
`;
                  if (highlight.note) {
                    noteContent += `  *Note:* ${highlight.note.replace(/r\n|r|n/g, " ")}
`;
                  }
                }
              });
              noteContent += "\n";
            }
            const frontmatter = createYamlFrontmatter(frontmatterData);
            const fileContent = frontmatter + noteContent;
            await app.vault.create(filePath, fileContent);
            if (processOutcome === "created") {
              createdCount++;
            } else if (processOutcome === "updated") {
              updatedCount++;
            }
          } else if (processOutcome === "skipped") {
            skippedCount++;
          } else if (processOutcome === "error") {
            errorCount++;
          }
          processed++;
          const raindropTitleAfterProcessing = raindrop.title || "Untitled";
          let statusText = "";
          if (processOutcome === "created") statusText = "Created";
          else if (processOutcome === "updated") statusText = "Updated";
          else if (processOutcome === "skipped") statusText = "Skipped";
          else if (processOutcome === "error") statusText = "Error";
          loadingNotice.setMessage(`${statusText} '${raindropTitleAfterProcessing}' in '${collectionTitleForNotice}'... (${processed}/${total})`);
        } catch (error) {
          errorCount++;
          processed++;
          let processErrorMsg = "An unknown error occurred";
          if (error instanceof Error) processErrorMsg = error.message;
          else if (typeof error === "string") processErrorMsg = error;
          const raindropTitleForError = (raindrop == null ? void 0 : raindrop.title) || "an unknown raindrop";
          console.error("Error processing file:", processErrorMsg, error, raindrop);
          loadingNotice.setMessage(`Error processing '${raindropTitleForError}' in '${collectionTitleForNotice}'... (${processed}/${total})`);
        }
      }
    }
    loadingNotice.hide();
    let summary = `${createdCount} notes created.`;
    if (updatedCount > 0) summary += ` ${updatedCount} updated.`;
    if (skippedCount > 0) summary += ` ${skippedCount} skipped (already exist).`;
    if (errorCount > 0) summary += ` ${errorCount} errors.`;
    new import_obsidian3.Notice(summary, 7e3);
    console.log(`Raindrop processing complete. Created: ${createdCount}, Updated: ${updatedCount}, Skipped: ${skippedCount}, Errors: ${errorCount}`);
  }
  // The updateRibbonIcon method is already defined at line ~360
};
var RaindropFetchModal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    this.collections = "";
    this.apiFilterTags = "";
    this.includeSubcollections = false;
    this.appendTagsToNotes = "";
    this.useRaindropTitleForFileName = true;
    this.tagMatchType = TagMatchTypes.ALL;
    this.filterType = FilterTypes.ALL;
    this.fetchOnlyNew = false;
    this.updateExisting = false;
    this.plugin = plugin;
    this.vaultPath = this.plugin.settings.defaultVaultLocation;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Make It Rain Options" });
    contentEl.createEl("h3", { text: "Fetch Criteria" });
    new import_obsidian3.Setting(contentEl).setName("Collections (comma-separated names or IDs)").setDesc("Enter collection names or IDs, separated by commas. Leave blank to fetch from all collections (unless tags below are specified).").addText((text) => {
      text.setPlaceholder("Enter Collection ID or Name or leave blank for all").setValue(this.collections).onChange((value) => {
        this.collections = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Filter by Tags (comma-separated)").setDesc("Filter raindrops by tags.").addText((text) => {
      text.setPlaceholder("e.g., article, project-x").setValue(this.apiFilterTags).onChange((value) => {
        this.apiFilterTags = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Tag Match Type").setDesc("Should raindrops match ALL specified tags or ANY of them?").addDropdown((dropdown) => {
      dropdown.addOption("all", "Match ALL tags (AND)").addOption("any", "Match ANY tag (OR)").setValue(this.tagMatchType).onChange((value) => {
        this.tagMatchType = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Include Subcollections").setDesc("If filtering by Collection IDs or Names, also include items from their subcollections.").addToggle((toggle) => {
      toggle.setValue(this.includeSubcollections).onChange((value) => {
        this.includeSubcollections = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Filter by Type").setDesc("Select the type of raindrops to fetch.").addDropdown((dropdown) => {
      dropdown.addOption("all", "All Types").addOption("link", "Links").addOption("article", "Articles").addOption("image", "Images").addOption("video", "Videos").addOption("document", "Documents").addOption("audio", "Audio").setValue(this.filterType).onChange((value) => {
        this.filterType = value;
      });
    });
    contentEl.createEl("h3", { text: "Note Options" });
    new import_obsidian3.Setting(contentEl).setName("Vault Folder (Optional)").setDesc("Target folder for notes. Leave blank for vault root or default setting.").addText((text) => {
      text.setPlaceholder(this.plugin.settings.defaultVaultLocation || "Vault Root").setValue(this.vaultPath).onChange((value) => {
        this.vaultPath = value.trim();
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Append Tags to Note Frontmatter (comma-separated)").setDesc("Additional tags to add to the YAML frontmatter of each created note.").addText((text) => {
      text.setPlaceholder("e.g., #imported/raindrop").setValue(this.appendTagsToNotes).onChange((value) => {
        this.appendTagsToNotes = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Use Raindrop Title for File Name").setDesc("Use title (via template) for filenames? If off, uses Raindrop ID.").addToggle((toggle) => {
      toggle.setValue(this.useRaindropTitleForFileName).onChange((value) => {
        this.useRaindropTitleForFileName = value;
      });
    });
    const fetchOnlyNewSetting = new import_obsidian3.Setting(contentEl).setName("Fetch only new items").setDesc("If the target folder is not empty, only fetch raindrops that have not been imported before.").addToggle((toggle) => {
      toggle.setValue(this.fetchOnlyNew).onChange((value) => {
        this.fetchOnlyNew = value;
      });
    });
    const updateExistingSetting = new import_obsidian3.Setting(contentEl).setName("Update existing notes").setDesc("If a note with the same name exists, update its content if the source raindrop has changed.").addToggle((toggle) => {
      toggle.setValue(this.updateExisting).onChange((value) => {
        this.updateExisting = value;
        fetchOnlyNewSetting.setDisabled(value);
        if (value) {
          this.fetchOnlyNew = false;
          fetchOnlyNewSetting.controlEl.querySelector('input[type="checkbox"]').checked = false;
        }
      });
    });
    new import_obsidian3.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Fetch Raindrops").setCta().onClick(async () => {
        const options = {
          vaultPath: this.vaultPath || void 0,
          collections: this.collections,
          apiFilterTags: this.apiFilterTags,
          includeSubcollections: this.includeSubcollections,
          appendTagsToNotes: this.appendTagsToNotes,
          useRaindropTitleForFileName: this.useRaindropTitleForFileName,
          tagMatchType: this.tagMatchType,
          filterType: this.filterType,
          fetchOnlyNew: this.fetchOnlyNew,
          updateExisting: this.updateExisting
        };
        this.close();
        await this.plugin.fetchRaindrops(options);
      });
    }).addButton((btn) => {
      btn.setButtonText("Cancel").onClick(() => {
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var RaindropToObsidianSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("img", { attr: { src: "https://i.ibb.co/HTx7TnbN/makeitrain.png", width: "750" } });
    containerEl.createEl("h2", { text: "Import your Raindrop.io bookmarks into your Obsidian vault with ease." });
    containerEl.createEl("p").createEl("a", { text: "Visit Raindrop.io website", href: "https://raindrop.io", attr: { target: "_blank", rel: "noopener noreferrer" } });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "API Configuration" });
    const apiDesc = containerEl.createDiv({ cls: "setting-item-description" });
    apiDesc.createSpan({ text: "You need to create a Test Token from your " });
    apiDesc.createEl("a", { text: "Raindrop.io Apps settings page", href: "https://app.raindrop.io/settings/integrations", attr: { target: "_blank", rel: "noopener noreferrer" } });
    apiDesc.createSpan({ text: "." });
    new import_obsidian3.Setting(containerEl).setName("Raindrop.io API Token").setDesc("You need to create a Test Token from your Raindrop.io Apps settings page (https://app.raindrop.io/settings/integrations).").addText((text) => {
      text.setPlaceholder("Enter your token").setValue(this.plugin.settings.raindropApiToken).onChange(async (value) => {
        this.plugin.settings.raindropApiToken = value;
        await this.plugin.saveSettings();
      });
    }).addButton((button) => {
      button.setButtonText("Verify Token").setCta().onClick(() => this.verifyApiToken());
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "General Settings" });
    new import_obsidian3.Setting(containerEl).setName("Show Ribbon Icon").setDesc("Toggle to show or hide the Make It Rain ribbon icon.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showRibbonIcon).onChange(async (value) => {
        this.plugin.settings.showRibbonIcon = value;
        await this.plugin.saveSettings();
        this.plugin.updateRibbonIcon();
      });
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "Note Storage & Naming" });
    new import_obsidian3.Setting(containerEl).setName("Default Vault Location for Notes").setDesc("Default folder to save notes if not specified in the fetch options modal. Leave blank for vault root.").addText((text) => {
      text.setPlaceholder(this.plugin.settings.defaultVaultLocation || "Vault Root").setValue(this.plugin.settings.defaultVaultLocation).onChange(async (value) => {
        this.plugin.settings.defaultVaultLocation = value.trim();
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("p", { cls: "setting-item-description", text: 'Configure how filenames are generated when "Use Raindrop Title" is enabled in the fetch options modal. Uses Handlebars-like syntax.' });
    new import_obsidian3.Setting(containerEl).setName("File Name Template").setDesc("Placeholders: {{title}}, {{id}}, {{collectionTitle}}, {{date}} (YYYY-MM-DD).").addText((text) => {
      text.setPlaceholder("{{title}}").setValue(this.plugin.settings.fileNameTemplate).onChange(async (value) => {
        this.plugin.settings.fileNameTemplate = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Banner Frontmatter Field Name").setDesc("Customize the frontmatter field name used for the banner image. Default: banner").addText((text) => {
      text.setPlaceholder("banner").setValue(this.plugin.settings.bannerFieldName).onChange(async (value) => {
        this.plugin.settings.bannerFieldName = value.trim();
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("hr");
    const footer = containerEl.createDiv({ cls: "setting-footer" });
    footer.createEl("p", { text: "Need help configuring or using the plugin? Check the README." });
    footer.createEl("a", { text: "Plugin GitHub Repository", href: "https://github.com/frostmute/make-it-rain", attr: { target: "_blank", rel: "noopener noreferrer" } });
  }
  async verifyApiToken() {
    const { raindropApiToken } = this.plugin.settings;
    if (!raindropApiToken) {
      new import_obsidian3.Notice("Please enter an API token first.", 5e3);
      return;
    }
    new import_obsidian3.Notice("Verifying API token...", 3e3);
    const baseApiUrl = "https://api.raindrop.io/rest/v1";
    const fetchOptions = {
      headers: {
        "Authorization": `Bearer ${raindropApiToken}`,
        "Content-Type": "application/json"
      }
    };
    try {
      const response = await (0, import_obsidian4.request)({
        url: `${baseApiUrl}/user`,
        method: "GET",
        headers: fetchOptions.headers
      });
      let data;
      if (typeof response === "string") {
        data = JSON.parse(response);
      } else {
        data = response;
      }
      if (data.result) {
        new import_obsidian3.Notice("API Token is valid!", 5e3);
      } else {
        const errorMessage = data.message || data.error || "Invalid API token or connection issue.";
        new import_obsidian3.Notice(`API Token verification failed: ${errorMessage}`, 1e4);
        console.error("API Token verification failed:", data);
      }
    } catch (error) {
      let errorMsg = "An error occurred during token verification.";
      if (error instanceof Error) errorMsg = error.message;
      else if (typeof error === "string") errorMsg = error;
      new import_obsidian3.Notice(`API Token verification failed: ${errorMsg}`, 1e4);
      console.error("Error verifying API token:", error);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,

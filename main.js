/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RaindropToObsidian
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  raindropApiToken: "",
  defaultVaultLocation: "",
  fileNameTemplate: "{{title}}"
};
var RateLimiter = class {
  constructor() {
    this.requestCount = 0;
    this.resetTime = Date.now() + 6e4;
    // 1 minute window
    this.maxRequests = 120;
  }
  // Raindrop.io limit: 120 requests per minute
  async checkLimit() {
    const now = Date.now();
    if (now >= this.resetTime) {
      this.requestCount = 0;
      this.resetTime = now + 6e4;
    }
    if (this.requestCount >= this.maxRequests) {
      const waitTime = this.resetTime - now;
      await new Promise((resolve) => setTimeout(resolve, waitTime));
      this.requestCount = 0;
      this.resetTime = Date.now() + 6e4;
    }
    this.requestCount++;
  }
};
async function fetchWithRetry(url, options, rateLimiter, maxRetries = 3) {
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      await rateLimiter.checkLimit();
      const response = await fetch(url, options);
      if (response.ok) {
        return response;
      }
      if (response.status === 429) {
        const retryAfter = parseInt(response.headers.get("Retry-After") || "60");
        await new Promise((resolve) => setTimeout(resolve, retryAfter * 1e3));
        continue;
      }
      if (response.status >= 400 && response.status < 500) {
        throw new Error(`API Error: ${response.status} - ${await response.text()}`);
      }
      if (attempt < maxRetries - 1) {
        await new Promise(
          (resolve) => setTimeout(resolve, Math.pow(2, attempt) * 1e3)
        );
        continue;
      }
      throw new Error(`Failed after ${maxRetries} attempts: ${response.status}`);
    } catch (error) {
      if (attempt === maxRetries - 1)
        throw error;
      await new Promise(
        (resolve) => setTimeout(resolve, Math.pow(2, attempt) * 1e3)
      );
    }
  }
  throw new Error("Unexpected error in fetchWithRetry");
}
async function fetchCollectionInfo(collectionId, apiToken, rateLimiter) {
  const fetchOptions = {
    headers: {
      "Authorization": `Bearer ${apiToken}`,
      "Content-Type": "application/json"
    }
  };
  try {
    const response = await fetchWithRetry(
      `https://api.raindrop.io/rest/v1/collection/${collectionId}`,
      fetchOptions,
      rateLimiter
    );
    const data = await response.json();
    if (data.result && data.item) {
      return data.item;
    }
    console.error("Failed to fetch collection info:", data);
    return null;
  } catch (error) {
    console.error(`Error fetching collection info for ${collectionId}:`, error);
    return null;
  }
}
async function createFolderStructure(app, basePath, collectionTitle) {
  const sanitizedTitle = collectionTitle.replace(/[\\/:*?"<>|]/g, "_");
  const fullPath = basePath ? `${basePath}/${sanitizedTitle}` : sanitizedTitle;
  try {
    if (!await app.vault.adapter.exists(fullPath)) {
      await app.vault.createFolder(fullPath);
    }
    return fullPath;
  } catch (error) {
    console.error(`Error creating folder structure for ${fullPath}:`, error);
    throw error;
  }
}
var RaindropToObsidian = class extends import_obsidian.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.settings = { ...DEFAULT_SETTINGS };
    this.rateLimiter = new RateLimiter();
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "fetch-raindrops",
      name: "Fetch Raindrops",
      callback: async () => {
        new RaindropFetchModal(this.app, this).open();
      }
    });
    this.addSettingTab(new RaindropToObsidianSettingTab(this.app, this));
    console.log("Make It Rain plugin loaded!");
  }
  onunload() {
    console.log("Make It Rain plugin unloaded.");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  sanitizeFileName(name) {
    const invalidChars = /[\/\\:*?"<>|#%&{}$!@'`+=]/g;
    const replacement = "";
    let sanitizedName = name.replace(invalidChars, replacement).trim();
    if (!sanitizedName)
      sanitizedName = "Unnamed_Raindrop";
    return sanitizedName.substring(0, 200);
  }
  generateFileName(raindrop, useRaindropTitleForFileName) {
    var _a;
    const { fileNameTemplate } = this.settings;
    if (!useRaindropTitleForFileName) {
      return this.sanitizeFileName((raindrop.id || "unknown_id").toString());
    }
    let fileName = fileNameTemplate;
    const replacePlaceholder = (placeholder, value) => {
      const safeValue = this.sanitizeFileName(value);
      const regex = new RegExp(`{{${placeholder}}}`, "gi");
      fileName = fileName.replace(regex, safeValue);
    };
    try {
      replacePlaceholder("title", raindrop.title || "Untitled");
      replacePlaceholder("id", (raindrop.id || "unknown_id").toString());
      replacePlaceholder("collectionTitle", ((_a = raindrop.collection) == null ? void 0 : _a.title) || "No Collection");
      const createdDate = raindrop.created ? new Date(raindrop.created) : null;
      let formattedDate = "no_date";
      if (createdDate && !isNaN(createdDate.getTime())) {
        formattedDate = createdDate.toISOString().split("T")[0];
      }
      replacePlaceholder("date", formattedDate);
    } catch (error) {
      let errorMsg = "template processing error";
      if (error instanceof Error)
        errorMsg = error.message;
      console.error("Error processing file name template:", errorMsg, error);
      new import_obsidian.Notice("Error generating file name. Check console or template.");
      return "Error_Filename_" + Date.now();
    }
    let finalFileName = this.sanitizeFileName(fileName);
    if (!finalFileName.trim()) {
      return "Unnamed_Raindrop_" + (raindrop.id || Date.now());
    }
    return finalFileName;
  }
  async fetchRaindrops(options) {
    var _a;
    new import_obsidian.Notice("Fetching raindrops...", 3e3);
    const { raindropApiToken } = this.settings;
    const { vaultPath, collections, apiFilterTags, includeSubcollections, appendTagsToNotes, useRaindropTitleForFileName, tagMatchType } = options;
    if (!raindropApiToken) {
      new import_obsidian.Notice("Raindrop API token is not set. Please configure it in the plugin settings.", 1e4);
      return;
    }
    const collectionIds = collections.split(",").map((id) => id.trim()).filter((id) => id !== "");
    const filterTagsArray = apiFilterTags.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
    let searchParameterString = "";
    if (filterTagsArray.length > 0) {
      console.log("Tag match type:", tagMatchType);
      console.log("Original tags:", filterTagsArray);
      if (tagMatchType === "all") {
        searchParameterString = filterTagsArray.map((tag) => {
          const cleanTag = tag.trim().replace(/^#/, "");
          return tag.includes(" ") ? `"${cleanTag}"` : cleanTag;
        }).join(" ");
        searchParameterString = `#${searchParameterString}`;
      } else {
        searchParameterString = "";
      }
      console.log("Constructed search query:", searchParameterString);
    }
    const baseApiUrl = "https://api.raindrop.io/rest/v1";
    let allData = [];
    const perPage = 50;
    try {
      let fetchMode = "all";
      if (collectionIds.length > 0)
        fetchMode = "collections";
      else if (searchParameterString || filterTagsArray.length > 0)
        fetchMode = "tags";
      const fetchOptions = {
        headers: {
          "Authorization": `Bearer ${raindropApiToken}`,
          "Content-Type": "application/json"
        }
      };
      if (fetchMode === "collections") {
        for (const collectionId of collectionIds) {
          let hasMore = true;
          let page = 0;
          while (hasMore) {
            const params = new URLSearchParams({
              perpage: perPage.toString(),
              page: page.toString()
            });
            if (includeSubcollections) {
              params.append("nested", "true");
            }
            if (searchParameterString) {
              params.append("search", searchParameterString);
            }
            const currentApiUrl = `${baseApiUrl}/raindrops/${collectionId}?${params.toString()}`;
            console.log(`Requesting collection ${collectionId} with${includeSubcollections ? "" : "out"} nested items:`, currentApiUrl);
            const response = await fetchWithRetry(currentApiUrl, fetchOptions, this.rateLimiter);
            const data = await response.json();
            if (!data.result) {
              console.error(`API Error for collection ${collectionId}:`, data);
              throw new Error(`API Error: ${JSON.stringify(data)}`);
            }
            if (data == null ? void 0 : data.items) {
              allData = allData.concat(data.items);
              page++;
              hasMore = data.items.length === perPage;
              console.log(`Fetched ${data.items.length} items from collection ${collectionId}, page ${page}`);
            } else {
              console.warn(`Unexpected response for collection ${collectionId}. Stopping.`);
              hasMore = false;
            }
          }
        }
      } else if (fetchMode === "tags") {
        if (tagMatchType === "any" && filterTagsArray.length > 0) {
          const uniqueItems = /* @__PURE__ */ new Map();
          for (const tag of filterTagsArray) {
            let hasMore = true;
            let page = 0;
            while (hasMore) {
              const params = new URLSearchParams({
                perpage: perPage.toString(),
                page: page.toString(),
                search: `#${tag.trim()}`
                // Simple, reliable single-tag search
              });
              const currentApiUrl = `${baseApiUrl}/raindrops/0?${params.toString()}`;
              console.log(`Requesting items with tag: ${tag}`, currentApiUrl);
              const response = await fetchWithRetry(currentApiUrl, fetchOptions, this.rateLimiter);
              const data = await response.json();
              if (!data.result) {
                console.error(`API Error for tag ${tag}:`, data);
                continue;
              }
              console.log(`API Response for tag ${tag}:`, {
                result: data.result,
                itemCount: ((_a = data == null ? void 0 : data.items) == null ? void 0 : _a.length) || 0,
                totalCount: (data == null ? void 0 : data.count) || 0
              });
              if (data == null ? void 0 : data.items) {
                data.items.forEach((item) => {
                  if (!uniqueItems.has(item._id)) {
                    uniqueItems.set(item._id, item);
                  }
                });
                page++;
                hasMore = data.items.length === perPage;
                console.log(`Fetched ${data.items.length} items for tag ${tag}, page ${page}`);
              } else {
                hasMore = false;
              }
            }
          }
          allData = Array.from(uniqueItems.values());
          console.log(`Total unique items found across all tags: ${allData.length}`);
        } else {
          let hasMore = true;
          let page = 0;
          while (hasMore) {
            const params = new URLSearchParams({
              perpage: perPage.toString(),
              page: page.toString(),
              search: searchParameterString
            });
            const currentApiUrl = `${baseApiUrl}/raindrops/0?${params.toString()}`;
            console.log(`Requesting items with tags: ${searchParameterString}`, currentApiUrl);
            const response = await fetchWithRetry(currentApiUrl, fetchOptions, this.rateLimiter);
            const data = await response.json();
            if (!data.result) {
              console.error("API Error for tag search:", data);
              throw new Error(`API Error: ${JSON.stringify(data)}`);
            }
            if (data == null ? void 0 : data.items) {
              allData = allData.concat(data.items);
              page++;
              hasMore = data.items.length === perPage;
              console.log(`Fetched ${data.items.length} items with tags, page ${page}`);
            } else {
              hasMore = false;
            }
          }
        }
      } else {
        let hasMore = true;
        let page = 0;
        while (hasMore) {
          const params = new URLSearchParams({
            perpage: perPage.toString(),
            page: page.toString()
          });
          const currentApiUrl = `${baseApiUrl}/raindrops/0?${params.toString()}`;
          console.log("Requesting all items:", currentApiUrl);
          const response = await fetchWithRetry(currentApiUrl, fetchOptions, this.rateLimiter);
          const data = await response.json();
          if (!data.result) {
            console.error("API Error for all items fetch:", data);
            throw new Error(`API Error: ${JSON.stringify(data)}`);
          }
          if (data == null ? void 0 : data.items) {
            allData = allData.concat(data.items);
            page++;
            hasMore = data.items.length === perPage;
            console.log(`Fetched ${data.items.length} items, page ${page}`);
          } else {
            console.warn("Unexpected response for all items fetch. Stopping.");
            hasMore = false;
          }
        }
      }
      if (allData.length === 0) {
        if (collectionIds.length > 0 || searchParameterString || filterTagsArray.length > 0) {
          new import_obsidian.Notice("No raindrops found matching your criteria.", 5e3);
        } else {
          new import_obsidian.Notice("No raindrops found in your account.", 5e3);
        }
      } else {
        new import_obsidian.Notice(`Found ${allData.length} raindrops. Processing...`, 5e3);
        await this.processRaindrops(allData, vaultPath, appendTagsToNotes, useRaindropTitleForFileName);
      }
    } catch (error) {
      let errorMessage = "An unknown error occurred during fetch";
      if (error instanceof Error)
        errorMessage = error.message;
      else if (typeof error === "string")
        errorMessage = error;
      new import_obsidian.Notice(`Error fetching raindrops: ${errorMessage}`, 1e4);
      console.error("Error fetching Raindrop API:", error);
    }
  }
  async processRaindrops(raindrops, vaultPath, appendTagsToNotes, useRaindropTitleForFileName) {
    var _a, _b, _c, _d;
    const { app } = this;
    const settingsFMTags = appendTagsToNotes.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
    if (vaultPath === void 0)
      vaultPath = this.settings.defaultVaultLocation;
    const targetFolderPath = (_a = vaultPath == null ? void 0 : vaultPath.trim()) != null ? _a : "";
    if (targetFolderPath) {
      try {
        const folder = app.vault.getAbstractFileByPath(targetFolderPath);
        if (!folder) {
          console.log(`Creating base folder: ${targetFolderPath}`);
          await app.vault.createFolder(targetFolderPath);
        } else if (!folder.hasOwnProperty("children")) {
          throw new Error(`Path exists but is not a folder: ${targetFolderPath}`);
        }
      } catch (error) {
        let errorMsg = "folder creation failed";
        if (error instanceof Error)
          errorMsg = error.message;
        new import_obsidian.Notice(`Failed to create/verify base folder: ${targetFolderPath}. Error: ${errorMsg}.`, 1e4);
        console.error("Error with folder operation:", error);
        return;
      }
    }
    const raindropsByCollection = {};
    const collectionInfo = {};
    for (const raindrop of raindrops) {
      if ((_b = raindrop.collection) == null ? void 0 : _b.$id) {
        const collectionId = raindrop.collection.$id.toString();
        if (!raindropsByCollection[collectionId]) {
          raindropsByCollection[collectionId] = [];
          if (!collectionInfo[collectionId]) {
            const info = await fetchCollectionInfo(collectionId, this.settings.raindropApiToken, this.rateLimiter);
            if (info) {
              collectionInfo[collectionId] = info;
            }
          }
        }
        raindropsByCollection[collectionId].push(raindrop);
      } else {
        if (!raindropsByCollection["uncategorized"]) {
          raindropsByCollection["uncategorized"] = [];
        }
        raindropsByCollection["uncategorized"].push(raindrop);
      }
    }
    let createdCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    const total = raindrops.length;
    let processed = 0;
    for (const [collectionId, collectionRaindrops] of Object.entries(raindropsByCollection)) {
      try {
        let collectionPath = targetFolderPath;
        if (collectionId !== "uncategorized" && collectionInfo[collectionId]) {
          const collection = collectionInfo[collectionId];
          collectionPath = await createFolderStructure(app, targetFolderPath, collection.title);
        } else if (collectionId === "uncategorized") {
          collectionPath = await createFolderStructure(app, targetFolderPath, "Uncategorized");
        }
        for (const raindrop of collectionRaindrops) {
          try {
            const generatedFilename = this.generateFileName(raindrop, useRaindropTitleForFileName);
            const filePath = `${collectionPath}/${generatedFilename}.md`;
            if (await app.vault.adapter.exists(filePath)) {
              console.log(`Skipping existing file: ${filePath}`);
              skippedCount++;
              processed++;
              if (processed % 10 === 0) {
                new import_obsidian.Notice(`Progress: ${processed}/${total} raindrops processed...`, 3e3);
              }
              continue;
            }
            const rdTitle = raindrop.title || "Untitled Raindrop";
            const rdNoteContent = raindrop.note || "";
            const rdExcerpt = raindrop.excerpt || "";
            const rdSourceUrl = raindrop.link;
            const rdCoverUrl = raindrop.cover || "";
            let fileContent = "---\n";
            fileContent += `title: "${rdTitle.replace(/"/g, '\\"')}"
`;
            if (rdExcerpt) {
              if (rdExcerpt.includes("\n")) {
                fileContent += "description: |\n";
                rdExcerpt.split("\n").forEach(
                  (line) => fileContent += `  ${line.replace(/\s+$/, "")}
`
                );
              } else {
                fileContent += `description: "${rdExcerpt.replace(/"/g, '\\"')}"
`;
              }
            } else {
              fileContent += 'description: ""\n';
            }
            fileContent += `source: ${rdSourceUrl}
`;
            fileContent += `type: ${raindrop.type}
`;
            fileContent += `created: ${raindrop.created}
`;
            fileContent += `last_update: ${raindrop.lastUpdate}
`;
            if (collectionId !== "uncategorized" && collectionInfo[collectionId]) {
              const collection = collectionInfo[collectionId];
              fileContent += `collection:
`;
              fileContent += `  id: ${collection._id}
`;
              fileContent += `  title: "${collection.title.replace(/"/g, '\\"')}"
`;
              if ((_c = collection.parent) == null ? void 0 : _c.$id) {
                fileContent += `  parent_id: ${collection.parent.$id}
`;
              }
            }
            let combinedFMTags = [...settingsFMTags];
            if (raindrop.tags && Array.isArray(raindrop.tags)) {
              raindrop.tags.forEach((tag) => {
                const trimmedTag = tag.trim();
                if (trimmedTag && !combinedFMTags.includes(trimmedTag)) {
                  combinedFMTags.push(trimmedTag);
                }
              });
            }
            if (combinedFMTags.length > 0) {
              fileContent += "tags:\n";
              combinedFMTags.forEach((tag) => {
                const sanitizedTag = tag.replace(/ /g, "_").replace(/[^\w\u00C0-\u00FF\u0100-\u017F\u0180-\u024F\u1E00-\u1EFF\/-]+/g, "");
                if (sanitizedTag)
                  fileContent += `  - ${sanitizedTag}
`;
              });
            } else {
              fileContent += "tags: []\n";
            }
            if (rdCoverUrl) {
              fileContent += `banner: ${rdCoverUrl}
`;
            }
            fileContent += "---\n\n";
            if (rdCoverUrl) {
              const altText = this.sanitizeFileName(rdTitle === "Untitled Raindrop" ? "Cover Image" : rdTitle).replace(/\.md$/i, "");
              fileContent += `![${altText}](${rdCoverUrl})

`;
            }
            fileContent += `# ${rdTitle}

`;
            if (rdNoteContent)
              fileContent += `## Notes
${rdNoteContent}

`;
            if (rdExcerpt)
              fileContent += `## Description
${rdExcerpt}

`;
            if (raindrop.highlights && Array.isArray(raindrop.highlights) && raindrop.highlights.length > 0) {
              fileContent += "## Highlights\n";
              raindrop.highlights.forEach((highlight) => {
                if (highlight.text) {
                  fileContent += `- ${highlight.text.replace(/\r\n|\r|\n/g, " ")}
`;
                  if (highlight.note) {
                    fileContent += `  *Note:* ${highlight.note.replace(/\r\n|\r|\n/g, " ")}
`;
                  }
                }
              });
              fileContent += "\n";
            }
            await app.vault.create(filePath, fileContent);
            createdCount++;
            processed++;
            if (processed % 10 === 0) {
              new import_obsidian.Notice(`Progress: ${processed}/${total} raindrops processed...`, 3e3);
            }
          } catch (error) {
            errorCount++;
            processed++;
            let processErrorMsg = "An unknown error occurred";
            if (error instanceof Error)
              processErrorMsg = error.message;
            else if (typeof error === "string")
              processErrorMsg = error;
            const raindropTitleForError = (raindrop == null ? void 0 : raindrop.title) || "an unknown raindrop";
            new import_obsidian.Notice(`Error creating file for: ${raindropTitleForError}. Error: ${processErrorMsg}`, 1e4);
            console.error("Error creating file:", processErrorMsg, error, raindrop);
          }
        }
      } catch (error) {
        errorCount++;
        processed++;
        let collectionErrorMsg = "An unknown error occurred";
        if (error instanceof Error)
          collectionErrorMsg = error.message;
        else if (typeof error === "string")
          collectionErrorMsg = error;
        const collectionTitleForError = ((_d = collectionInfo[collectionId]) == null ? void 0 : _d.title) || "an unknown collection";
        new import_obsidian.Notice(`Error processing collection ${collectionTitleForError}: ${collectionErrorMsg}`, 1e4);
        console.error("Error processing collection:", collectionErrorMsg, error, collectionInfo[collectionId]);
      }
    }
    let summary = `${createdCount} notes created.`;
    if (skippedCount > 0)
      summary += ` ${skippedCount} skipped (already exist).`;
    if (errorCount > 0)
      summary += ` ${errorCount} errors.`;
    new import_obsidian.Notice(summary, 7e3);
    console.log(`Raindrop processing complete. Created: ${createdCount}, Skipped: ${skippedCount}, Errors: ${errorCount}`);
  }
};
var RaindropFetchModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.collections = "";
    this.apiFilterTags = "";
    this.includeSubcollections = false;
    this.appendTagsToNotes = "";
    this.useRaindropTitleForFileName = true;
    this.tagMatchType = "all";
    this.plugin = plugin;
    this.vaultPath = this.plugin.settings.defaultVaultLocation;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Fetch Raindrops Options" });
    contentEl.createEl("h3", { text: "Fetch Criteria" });
    new import_obsidian.Setting(contentEl).setName("Vault Folder (Optional)").setDesc("Target folder for notes. Leave blank for vault root or default setting.").addText((text) => {
      text.setPlaceholder(this.plugin.settings.defaultVaultLocation || "Vault Root").setValue(this.vaultPath).onChange((value) => {
        this.vaultPath = value.trim();
      });
    });
    new import_obsidian.Setting(contentEl).setName("Collections (comma-separated IDs)").setDesc("Leave blank to fetch from all collections (unless tags below are specified).").addText((text) => {
      text.setPlaceholder("e.g., 123,456").setValue(this.collections).onChange((value) => {
        this.collections = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Filter by Tags (comma-separated)").setDesc("Filter raindrops by tags.").addText((text) => {
      text.setPlaceholder("e.g., article, project-x").setValue(this.apiFilterTags).onChange((value) => {
        this.apiFilterTags = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Tag Match Type").setDesc("Should raindrops match ALL specified tags or ANY of them?").addDropdown((dropdown) => {
      dropdown.addOption("all", "Match ALL tags (AND)").addOption("any", "Match ANY tag (OR)").setValue(this.tagMatchType).onChange((value) => {
        this.tagMatchType = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Include Subcollections").setDesc("If filtering by Collection IDs, also include items from their subcollections.").addToggle((toggle) => {
      toggle.setValue(this.includeSubcollections).onChange((value) => {
        this.includeSubcollections = value;
      });
    });
    contentEl.createEl("h3", { text: "Note Options" });
    new import_obsidian.Setting(contentEl).setName("Append Tags to Note Frontmatter (comma-separated)").setDesc("Additional tags to add to the YAML frontmatter of each created note.").addText((text) => {
      text.setPlaceholder("e.g., #imported/raindrop").setValue(this.appendTagsToNotes).onChange((value) => {
        this.appendTagsToNotes = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Use Raindrop Title for File Name").setDesc("Use title (via template) for filenames? If off, uses Raindrop ID.").addToggle((toggle) => {
      toggle.setValue(this.useRaindropTitleForFileName).onChange((value) => {
        this.useRaindropTitleForFileName = value;
      });
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => {
      btn.setButtonText("Fetch Raindrops").setCta().onClick(async () => {
        const options = {
          vaultPath: this.vaultPath || void 0,
          collections: this.collections,
          apiFilterTags: this.apiFilterTags,
          includeSubcollections: this.includeSubcollections,
          appendTagsToNotes: this.appendTagsToNotes,
          useRaindropTitleForFileName: this.useRaindropTitleForFileName,
          tagMatchType: this.tagMatchType
        };
        this.close();
        await this.plugin.fetchRaindrops(options);
      });
    }).addButton((btn) => {
      btn.setButtonText("Cancel").onClick(() => {
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var RaindropToObsidianSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("img", {
      attr: {
        src: "https://i.ibb.co/HTx7TnbN/makeitrain.png",
        width: "750"
      }
    });
    containerEl.createEl("h2", {
      text: "Import your Raindrop.io bookmarks into your Obsidian vault"
    });
    containerEl.createEl("p").createEl("a", {
      text: "Visit Raindrop.io website",
      href: "https://raindrop.io",
      attr: { target: "_blank", rel: "noopener noreferrer" }
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "API Configuration" });
    const apiDesc = containerEl.createDiv({ cls: "setting-item-description" });
    apiDesc.createSpan({ text: "You need to create a Test Token from your " });
    apiDesc.createEl("a", {
      text: "Raindrop.io Apps settings page",
      href: "https://app.raindrop.io/settings/integrations",
      attr: { target: "_blank", rel: "noopener noreferrer" }
    });
    apiDesc.createSpan({ text: "." });
    new import_obsidian.Setting(containerEl).setName("Raindrop.io API Token").addText((text) => {
      text.setPlaceholder("Enter your token").setValue(this.plugin.settings.raindropApiToken).onChange(async (value) => {
        this.plugin.settings.raindropApiToken = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "Note Storage & Naming" });
    new import_obsidian.Setting(containerEl).setName("Default Vault Location for Notes").setDesc("Default folder to save notes if not specified in the fetch options modal. Leave blank for vault root.").addText((text) => {
      text.setPlaceholder("e.g., Raindrops/Inbox").setValue(this.plugin.settings.defaultVaultLocation).onChange(async (value) => {
        this.plugin.settings.defaultVaultLocation = value.trim();
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("p", {
      cls: "setting-item-description",
      text: 'Configure how filenames are generated when "Use Raindrop Title" is enabled in the fetch options modal. Uses Handlebars-like syntax.'
    });
    new import_obsidian.Setting(containerEl).setName("File Name Template").setDesc("Placeholders: {{title}}, {{id}}, {{collectionTitle}}, {{date}} (YYYY-MM-DD).").addText((text) => {
      text.setPlaceholder("{{title}}").setValue(this.plugin.settings.fileNameTemplate).onChange(async (value) => {
        this.plugin.settings.fileNameTemplate = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("hr");
    const footer = containerEl.createDiv({ cls: "setting-footer" });
    footer.createEl("p", {
      text: "Need help configuring or using the plugin? Check the README."
    });
    footer.createEl("a", {
      text: "Plugin GitHub Repository (Example)",
      href: "https://github.com/your-username/your-repo-name",
      attr: { target: "_blank", rel: "noopener noreferrer" }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
